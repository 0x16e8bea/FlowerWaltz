#pragma kernel CSMain
#define WAVE_SIZE 32

#include "UnityCG.cginc"
#include "SimplexNoise3D.cginc"
#include "CurlNoise3D.cginc"

RWStructuredBuffer<float3> PositionBuffer;
RWStructuredBuffer<float3> VelocityBuffer;
RWStructuredBuffer<float3> RotationBuffer; // rot.x, rot.y, rot.z, scale
RWStructuredBuffer<float> LifeTime;

CBUFFER_START(Params)
uint ParticleCount;
float DeltaTime;
float TriggerDistance;
float MaxLifeTime;
float Gravity;
float Drag;
float Scale;
float AttractionForce;
float ParticleSpeed;
float ParticleSpeedVariation;
float NeighbourDistance;
float2 _NoiseParams;
float3 _NoiseOffset;
float3 TargetPosition;


CBUFFER_END

[numthreads(WAVE_SIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// Index for which combined thread and thread group the compute shader is
	// executing in.
	uint instanceId = id.x;

	// Calculate particle velocity and add noise. Based on https://github.com/Shinao/Unity-GPU-Boids
	//float particleVel = ParticleSpeed * (1.0 + noise * ParticleSpeedVariation);

	float3 particlePos = PositionBuffer[instanceId];
	float3 particleRot = RotationBuffer[instanceId];
	float3 particleVel = VelocityBuffer[instanceId];

	float3 separation = float3(0.0, 0.0, 0.0);
	float3 alignment = float3(0.0, 0.0, 0.0);
	float3 cohesion = 0;

	// Add self that is not counted (avoids division by zero later on).
	uint nearbyCount = 1;
	for (uint i = 0; i < ParticleCount; i++) {
		if (i != int(instanceId)) {

			if (distance(particlePos, PositionBuffer[i]) < NeighbourDistance) {
				float3 tempPosition = PositionBuffer[i];

				float3 deltaPos = particlePos - tempPosition;
				float deltaLen = (length(deltaPos));
				float frac = 1/NeighbourDistance;
				
				// Scale that makes the range fall between 0 and the neighbourhood distance.
				float scale = clamp(frac*(NeighbourDistance-deltaLen),0,1);

				// Apply the scale and divide by deltaLen to get an exponential curve.
				separation += normalize(deltaPos) * scale / deltaLen;
				alignment += VelocityBuffer[i];
				cohesion += tempPosition;

				// Increment the nearby particle counter.
				nearbyCount++;
			}
		}
	}
	
	if (distance(TargetPosition, particlePos) < TriggerDistance && LifeTime[instanceId] < MaxLifeTime) {
	    LifeTime[instanceId] += 3 * DeltaTime;
	}

	// Get averages and normalize cohesion to obtain a vector of unit length.
	float average = 1.0 / nearbyCount;
	alignment *= average;
	cohesion *= average;
	cohesion = normalize(cohesion - particlePos);
	
    
	// Direction based on each of the behavioural components.
	float3 direction = alignment + separation + cohesion;

	// Calculate rotation and apply to rotation buffer.
    PositionBuffer[instanceId] += VelocityBuffer[instanceId] * DeltaTime; 

	VelocityBuffer[instanceId] *= Drag;
	VelocityBuffer[instanceId] += (normalize(TargetPosition - PositionBuffer[instanceId])) * AttractionForce * (LifeTime[instanceId] / MaxLifeTime) * DeltaTime;
	
	VelocityBuffer[instanceId] += (separation + alignment + cohesion) * DeltaTime;
	
	if (LifeTime[instanceId] > 0) {
	LifeTime[instanceId] -= DeltaTime;
	}
	
	if (particlePos.y > 0) {
	float3 np = (PositionBuffer[instanceId] + _NoiseOffset) * _NoiseParams.x;
    float3 n1 = snoise_grad(np);
    float3 n2 = snoise_grad(np + float3(2.42f, 10.22f, 44.56f));
    float3 curl = cross(n1, n2) * _NoiseParams.y;
	
    VelocityBuffer[instanceId] += curl * (LifeTime[instanceId] / MaxLifeTime) * DeltaTime;
    RotationBuffer[instanceId] = particleVel;    
    
    VelocityBuffer[instanceId].y -= Gravity * DeltaTime;
    
    } else {
    
    if (LifeTime[instanceId] > 0) {
        VelocityBuffer[instanceId].y = abs(VelocityBuffer[instanceId].y);
        } else {
        VelocityBuffer[instanceId] = 0;
        }
    }
	// Integrate rotation (direction of the particle) in the position buffer and
	// add velocity. Use delta time to make it framerate dependent.
	
	//PositionBuffer[instanceId] += (RotationBuffer[instanceId]) * (particleVel * DeltaTime);
	
	//VelocityBuffer[instanceId] += (cross(n1, n2) * _NoiseParams.y + RotationBuffer[instanceId]) * DeltaTime;

}
